/*

The following function print_fib uses fib(n) to print first n fibonacci numbers.

It is not efficient as it calls function fib() multiple times for the same value. For example, 
print_fib(6) will make the following calls to fib():

   fib(6) --> fib(5) --> fib(4) --> fib(3) --> fib(2)
                                               fib(1)
                                    fib(2) 
                         fib(3) --> fib(2)
                                    fib(1) 
              fib(4) --> fib(3) --> fib(2)
                                    fib(1) 
                         fib(2)

	fib(1) is called 3 times
	fib(2) is called 5 times
	fib(3) is called 3 times
	fib(4) is called 2 times
	fib(5) is called 1 times
	fib(6) is called 1 times

Some of the functions are called more than once... This is inefficient...

*/

int fib(int n) {
	if (n==1) return 1;
	if (n==2) return 1;
	return fib(n-1) + fib(n-2);	
} /* end fib */

int print_fib(int n) {
	int i;
	for (i=0;i<n;i++) {
		printf("%d ", fib(n));
	}
	printf("\n");
} /* end print_fib */


/*

If we keep in a memory what we have calculated, we can prevent the multiple calls with the same parameters.

The following code function uses an array to keep track of what has been calculated and returns that if it is already calculated. 

Assume that the array has -1 for the uncalculated fibonacci number.. Also assume that the size of the array is at least n+1.

*/

int fiba(int n, int a[]) {
	if (a[n]!=-1) return a[n];
	if (n==1) a[n] = 1;
	else if (n==2) a[n] = 1;
	else a[n] = fiba(n-1, a) + fiba(n-2, a);
	return a[n];
} /* end fiba */

void print_fiba(int n, int a[]) {
	int i;
	for (i=0;i<n;i++) {
		printf("%d ", fiba(n,a));
	}
	printf("\n");
} /* end print_fiba */

void test_fiba(int n) {
	int a[100], i;
	for (i=0;i<n;i++) a[i] = -1;
	
	printf_fiba(10,a);
	fiba(5,a);
	fiba(11,a);
} /* end test_fiba */
